{"version":3,"sources":["components/Dictionary.js","components/HangmanDrawing.js","components/HangmanGame.js","App.js","index.js"],"names":["dictionary","HangmanDrawing","width","height","points","className","this","_renderBody","_renderLeftArm","_renderRightArm","_renderLeftLeg","_renderRightLeg","_renderHead","props","body","cx","cy","r","x1","y1","x2","y2","leftArm","rightArm","leftLeg","rightLeg","Component","defaultProps","HangmanGame","handleGuess","e","letter","target","value","adder","state","secretWord","toUpperCase","includes","setState","st","guessed","add","numberOfWrongGuesses","resetButton","randomWord","Set","split","map","has","key","onClick","style","background","gameLost","maxWrongGuesses","gameWon","i","length","checkAllLettersHaveBeenGuessed","guessingZone","generateGuessingZone","alphabetClicker","generateKeyboard","answerMessage","endOfGame","classname","attemptsLeft","hangmanDrawing","max","randomIndex","Math","floor","random","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4f656585.chunk.js","sourcesContent":["var dictionary = [\n    \"daffodil\",\n    \"robot\",\n    \"finglonger\",\n    \"heiny\",\n    \"werewolf\",\n    \"hufflepuff\",\n    \"jabba\",\n    \"fencing\",\n    \"martini\",\n    \"cheesecake\",\n    \"glitter\",\n    \"rainbow\",\n    \"pedestrian\",\n    \"basic\",\n    \"husk\",\n    \"mimosa\",\n    \"blimp\",\n    \"fattening\",\n    \"pandemic\",\n    \"gasworks\",\n    \"galactic\",\n    \"neutronic\"\n];\n\nexport default dictionary;","import React, { Component, PropTypes } from 'react';\nimport './HangmanDrawing.css';\n\nclass HangmanDrawing extends Component {\n  render() {\n    return (\n      <svg width=\"500\" height=\"550\">\n        <polyline points=\"400,500 100,500 150,500 150,100 320,100 320,150\"\n                  className=\"HangmanDrawing-post\"/>\n        {this._renderBody()}\n        {this._renderLeftArm()}\n        {this._renderRightArm()}\n        {this._renderLeftLeg()}\n        {this._renderRightLeg()}\n        {this._renderHead()}\n      </svg>\n    );\n  }\n\n  _renderHead() {\n    return this.props.body\n        ? <circle cx=\"320\" cy=\"190\" r=\"40\" className=\"HangmanDrawing-head\" />\n        : null;\n  }\n\n  _renderBody() {\n    return this.props.body\n      ? <line x1=\"320\" y1=\"190\" x2=\"320\" y2=\"360\" className=\"HangmanDrawing-character\" />\n      : null;\n  }\n\n  _renderLeftArm() {\n    return this.props.leftArm\n      ? <line x1=\"320\" y1=\"260\" x2=\"250\" y2=\"230\" className=\"HangmanDrawing-character\" />\n      : null;\n  }\n\n  _renderRightArm() {\n    return this.props.rightArm\n      ? <line x1=\"320\" y1=\"260\" x2=\"390\" y2=\"230\" className=\"HangmanDrawing-character\" />\n      : null;\n  }\n\n  _renderLeftLeg() {\n    return this.props.leftLeg\n      ? <line x1=\"320\" y1=\"360\" x2=\"250\" y2=\"450\" className=\"HangmanDrawing-character\" />\n      : null;\n  }\n\n  _renderRightLeg() {\n    return this.props.rightLeg\n      ? <line x1=\"320\" y1=\"360\" x2=\"390\" y2=\"450\" className=\"HangmanDrawing-character\" />\n      : null;\n  }\n}\n\nHangmanDrawing.defaultProps = {\n  body: false,\n  leftArm: false,\n  rightArm: false,\n  leftLeg: false,\n  rightLeg: false,\n};\n\nexport default (attemptsLeft) => {\n    let props = {\n      body: attemptsLeft <= 4,\n      leftArm: attemptsLeft <= 3,\n      rightArm: attemptsLeft <= 2,\n      leftLeg: attemptsLeft <= 1,\n      rightLeg: attemptsLeft === 0,\n    };\n  \n    return <HangmanDrawing {...props} />\n};\n","import React, {Component} from 'react'\nimport dictionary from './Dictionary'\nimport hangmanDrawing from './HangmanDrawing';\nimport './HangmanGame.css';\n\n// STILL HAVE TO:\n// > SORT GUESSED LETTERS BY CORRECT AND INCORRECT (PROBABLY ONLY USE THE LATTER)\n// > STOP THE GAME WHEN PLAYER HAS LOST OR WON\n\nclass HangmanGame extends Component {\n\n  // Default properties for this component\n  static defaultProps = {\n    maxWrongGuesses: 6\n  }\n\n  // Initial states for the game\n  constructor(props) {\n    super(props);\n    this.state = {\n      secretWord: randomWord(),\n      numberOfWrongGuesses: 0,\n      guessed: new Set([])\n    }\n  }\n\n  // Guessing zone\n  generateGuessingZone() {\n    // A local const for the broken-up secret word\n    let secretWordUpper = this.state.secretWord.toUpperCase().split(\"\");\n    // Make a button for each constituent letter\n    return secretWordUpper.map(letter => (\n      <button className=\"purple-square\">\n        {this.state.guessed.has(letter)? letter: ' '}\n      </button>\n    ));\n  }\n\n  // Alphabetical buttons\n  generateKeyboard() {\n    // A local const for the broken-up alphabet\n    let letters = \"abcdefghijklmnopqrstuvwxyz\".toUpperCase().split(\"\");\n    // Make a button for each constituent letter\n    return letters.map(letter => (\n      <button \n        className=\"yellow-square\"\n        key={letter}\n        value={letter}\n        onClick={this.handleGuess}\n        style={this.state.guessed.has(letter) ? {background:'red'} : {} }\n        // disabled={this.state.guessed.has(letter)}\n      >\n        {letter}\n      </button>\n    ));\n  }\n\n  // Put clicked letters into the guessed array\n  handleGuess = e => {\n    // Determine the letter being guessed\n    let letter = e.target.value;\n    let adder = this.state.secretWord.toUpperCase().includes(letter) ? 0 : 1;\n    // Update some states based on this letter guess\n    this.setState(st => ({\n      // Add this letter to the list of guessed letters\n      guessed: st.guessed.add(letter),\n      // Possibly update the wrong guess counter\n      numberOfWrongGuesses: st.numberOfWrongGuesses + adder\n    }))\n  }\n\n  // Reset the game\n  resetButton = () => {\n    this.setState({\n      secretWord: randomWord(),\n      numberOfWrongGuesses: 0,\n      guessed: new Set([])\n    })\n  }\n\n  // This is the game itself\n  render() {\n    // Game is lost if too many mistakes are made\n    const gameLost = this.state.numberOfWrongGuesses >= this.props.maxWrongGuesses;\n    // Game is won if every letter is correctly guessed\n    // const gameWon = [...this.state.guessed].join(\"\") === this.state.secretWord.toUpperCase();\n    const gameWon = checkAllLettersHaveBeenGuessed(this.state.guessed,this.state.secretWord);\n    // const gameWon = numberOfLettersLeftToFind === 0? true : false;\n    // Input-output button clicker\n    let guessingZone = this.generateGuessingZone();\n    // Input-output button clicker\n    let alphabetClicker = this.generateKeyboard();\n    // The correct answer written in a string\n    let answerMessage = \"Correct answer: \" + this.state.secretWord;\n    // Messages when the game ends\n    let endOfGame = '';\n    if(gameWon) {\n      endOfGame = \"Winner winner!\"\n    }\n    if(gameLost) {\n      endOfGame = \"Ya lost m8.\"\n    }\n\n    // This is what's displayed on the browser\n    return (\n      <div className=\"hangman-container\">\n        <div className=\"hangman-heading\">\n          Hangman app\n        </div>\n        <div className=\"hangman-body\">\n          <div classname=\"hangman-controls\">\n            <br/>\n            {guessingZone}\n            <br/><br/><br/>\n            <h1 className=\"message\">\n              Wrong guesses: {this.state.numberOfWrongGuesses} of {this.props.maxWrongGuesses}\n            </h1>\n            <br/>\n            <p>\n              {alphabetClicker}\n            </p>\n            <button className=\"reset-button\" onClick={this.resetButton}>\n              Reset\n            </button>\n          </div>\n          <div classname=\"hangman-consequences\">\n            <div className=\"hangman-drawing\">\n              {hangmanDrawing(5-this.state.numberOfWrongGuesses)}\n            </div>\n            <div className=\"messages\">\n              <div className=\"message\">\n                <p>\n                  {[...this.state.guessed]}\n                  {/* {this.state.secretWord.map(letter => ([...this.state.guessed].has(letter)? letter: ' '))} */}\n                </p>\n              </div>\n              <div className=\"message\">\n                <p>\n                  {gameLost ? answerMessage : ''}\n                </p>\n              </div>\n              <div className=\"message\">\n                <p>\n                  {endOfGame}\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n\n  }\n}\n\n// Generate a random index from dictionary\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\n// Generate a random word from the dictionary\nfunction randomWord() {\n  var dictionaryLength = dictionary.length;\n  var randomIndex = getRandomInt(dictionaryLength);\n  return dictionary[randomIndex];\n}\n\n// \nfunction checkAllLettersHaveBeenGuessed(guessed,secretWord) {\n  for (var i=0; i<secretWord.length; i++) {\n    var letter = secretWord[i];\n    // check if letter is in \"guessed\" set -- if it isn't, add to the counter\n    if(!guessed.has(letter)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport default HangmanGame;","import React from 'react';\nimport HangmanGame from './components/HangmanGame';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HangmanGame />\n    </div>\n  );\n}\n\nexport default App;","import React, {Component} from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\n  ReactDOM.render(\n    <App />,\n    document.getElementById('root')\n  );\n"],"sourceRoot":""}